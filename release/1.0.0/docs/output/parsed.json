{"majorversion": 2, "filemap": {"terrific-1.0.0.js": {"classlist": ["Tc.Config", "Tc.Application", "Tc.Sandbox", "Tc.Module", "Tc.Connector", "Tc.Utils.String"], "name": "terrific-1.0.0.js", "module": "Tc"}}, "modules": {"Tc": {"description": "Terrific JavaScript Framework v1.0.0\nhttp://terrificjs.org\nCopyright 2011, Remo Brunschwiler\nDual licensed under the MIT or GPL Version 2 licenses.\nhttp://terrificjs.org/license\nDate: Fri, 29 Apr 2011 18:18:33 GMT", "submodules": [], "classlist": ["Tc.Config", "Tc.Application", "Tc.Sandbox", "Tc.Module", "Tc.Connector", "Tc.Utils.String"], "filelist": ["terrific-1.0.0.js"], "subdata": {}, "guessedname": "Tc", "guessedtype": "property", "name": "Tc"}}, "classmap": {"Tc.Sandbox": {"name": "Tc.Sandbox", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Sandbox."}], "namespace": "Tc", "module": "Tc", "guessedname": "Sandbox", "methods": {"getModuleById": {"return": {"type": "Module", "description": "the appropriate module"}, "params": [{"type": "int", "name": "id", "description": " the module id"}], "description": "Gets the appropriate module for the given id.", "guessedname": "getModuleById", "guessedtype": "function"}, "getConfigParam": {"return": {"type": "mixed", "description": "the appropriate configuration param"}, "params": [{"type": "String", "name": "name", "description": " the param name"}], "description": "Gets an application config param.", "guessedname": "getConfigParam", "guessedtype": "function"}, "readyForAfterBinding": {"return": {"type": "void", "description": ""}, "params": [{"type": "Function", "name": "callback", "description": " the afterBinding module callback"}], "description": "Collects the module status messages (ready for after binding) and handles the callbacks.", "guessedname": "readyForAfterBinding", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "Applicaton", "name": "application", "description": " the application reference"}, {"type": "Object", "name": "config", "description": " the configuration"}], "description": "Initializes the Sandbox.", "guessedname": "init", "guessedtype": "function"}, "addModules": {"return": {"type": "Array", "description": "a list containing the references of the registered modules."}, "params": [{"type": "jQuery", "name": "$ctx", "description": " the jquery context."}], "description": "Adds (register and start) all modules in the given context scope.", "guessedname": "addModules", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "the configuration object"}, "description": "Gets the application config.", "guessedname": "getConfig", "guessedtype": "function"}, "loadDependency": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "dependency", "description": " the dependency (i.e. swfobject.js)"}, {"type": "String", "name": "type", "description": " the dependency type (plugin | library | util | url)"}, {"type": "Function", "name": "callback", "description": " the callback to execute after the dependency has successfully loaded"}, {"type": "String", "name": "phase", "description": " the module phase where the dependency is needed (ie. beforeBinding, onBinding)"}], "description": "Loads a requested dependency (if not already loaded).", "guessedname": "loadDependency", "guessedtype": "function"}, "removeModules": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " a list containting the module instances to remove."}], "description": "Removes (stop and unregister) the modules by the given module instances.", "guessedname": "removeModules", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Sandbox", "properties": {"application": {"type": "Application", "description": "The application", "guessedname": "application", "guessedtype": "property"}, "dependencies": {"type": "Array", "description": "Contains the requested javascript dependencies.", "guessedname": "dependencies", "guessedtype": "property"}, "config": {"type": "Object", "description": "The configuration.", "guessedname": "config", "guessedtype": "property"}, "afterBindingCallbacks": {"type": "Array", "description": "Contains the afterBinding module callbacks.", "guessedname": "afterBindingCallbacks", "guessedtype": "property"}}, "description": "The sandbox is used as a central point to get resources from / grant permissions etc.\nIt is shared between all modules."}, "Tc.Connector": {"name": "Tc.Connector", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Connector."}], "namespace": "Tc", "module": "Tc", "guessedname": "Connector", "methods": {"init": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "connectorId", "description": " the unique connector id"}, {"type": "Object", "name": "connectorId", "description": ""}], "description": "Initializes the Connector.", "guessedname": "init", "guessedtype": "function"}, "unregisterComponent": {"return": {"type": "void", "description": ""}, "params": [{"type": "Module", "name": "component", "description": " the module to unregister"}], "description": "Unregisters a component.", "guessedname": "unregisterComponent", "guessedtype": "function"}, "registerComponent": {"return": {"type": "void", "description": ""}, "params": [{"type": "Module", "name": "component", "description": " the module to register"}, {"type": "String", "name": "role", "description": " the role of the module (ie. master, slave etc.)"}], "description": "Registers a component.", "guessedname": "registerComponent", "guessedtype": "function"}, "notify": {"return": {"type": "boolean", "description": "indicates whether the default action should be excuted or not"}, "params": [{"type": "Module", "name": "component", "description": " the module that sends the state change"}, {"type": "String", "name": "state", "description": " the state"}, {"type": "Object", "name": "data", "description": " contains the state relevant data (if any)"}, {"type": "Function", "name": "callback", "description": " the callback function (could be executed after an asynchronous action)"}], "description": "Notifies all registered components about the state change (to be overriden in the specific connectors).", "guessedname": "notify", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Connector", "description": "Base class for the different connectors."}, "Tc.Config": {"name": "Tc.Config", "author": "Remo Brunschwiler", "namespace": "Tc", "module": "Tc", "guessedname": "Config", "static": "", "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Config", "properties": {"dependencyPath": {"type": "Object", "description": "The paths for the different dependency types.", "guessedname": "dependencyPath", "guessedtype": "property"}}, "description": "Contains the application base config.\nThe base config can be extended or overwritten either via new Application ($ctx, config)\nduring bootstrapping the application or via /public/js/Tc.Config.js in the project folder."}, "Tc.Utils.String": {"name": "Tc.Utils.String", "author": "Remo Brunschwiler", "namespace": "Tc.Utils", "module": "Tc", "methods": {"capitalize": {"return": {"type": "String", "description": "the capitalized string"}, "params": [{"type": "String", "name": "str", "description": " the original string"}], "description": "Capitalizes the first letter of the given string.", "guessedname": "capitalize", "guessedtype": "function"}}, "static": "", "file": "terrific-1.0.0.js", "shortname": "String", "description": "Contains utility functions for string concerning tasks."}, "Tc.Module": {"name": "Tc.Module", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Module."}], "namespace": "Tc", "module": "Tc", "guessedname": "Module", "methods": {"initOnBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the on binding phase.", "guessedname": "initOnBinding", "guessedtype": "function"}, "initAfterBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the after binding phase.", "guessedname": "initAfterBinding", "guessedtype": "function"}, "getDecoratedModule": {"return": {"type": "Module", "description": "the decorated module"}, "params": [{"type": "String", "name": "module", "description": " the name of the module"}, {"type": "String", "name": "skin", "description": " the name of the skin"}], "description": "Decorates itself with the given skin.", "guessedname": "getDecoratedModule", "guessedtype": "function"}, "fire": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "state", "description": " the new state"}, {"type": "Object", "name": "data", "description": " the data to provide to your connected modules"}, {"type": "Function", "name": "defaultAction", "description": " the default action to perform"}], "description": "Notifies all attached connectors about changes.", "guessedname": "fire", "guessedtype": "function"}, "require": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "dependency", "description": " the dependency (i.e. swfobject.js)"}, {"type": "String", "name": "type", "description": " the dependency type (library | plugin | util | url)"}, {"type": "String", "name": "phase", "description": " the module phase where the dependency is needed (ie. beforeBinding, onBinding)"}, {"type": "boolean", "name": "executeCallback", "description": " indicates whether the phase callback should be executed or not (useful for dependencies that provide their own callback mechanism)"}], "description": "Manages the required dependencies.", "guessedname": "require", "guessedtype": "function"}, "stop": {"return": {"type": "void", "description": ""}, "description": "Template method to stop the module.", "guessedname": "stop", "guessedtype": "function"}, "attachConnector": {"return": {"type": "void", "description": ""}, "params": [{"type": "Connector", "name": "connector", "description": " the connector to attach"}], "description": "Attaches a connector (observer).", "guessedname": "attachConnector", "guessedtype": "function"}, "beforeBindingCallback": {"return": {"type": "void", "description": ""}, "description": "Callback for the before binding phase.", "guessedname": "beforeBindingCallback", "guessedtype": "function"}, "start": {"return": {"type": "void", "description": ""}, "description": "Template method to start (init) the module.\nThis method provides some hook functions which could be overridden from the concrete implementation", "guessedname": "start", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "jQuery", "name": "$ctx", "description": " the jquery context"}, {"type": "Sandbox", "name": "sandbox", "description": " the sandbox to get the resources from"}, {"type": "String", "name": "modId", "description": " the unique module id"}], "description": "Initializes the Module.", "guessedname": "init", "guessedtype": "function"}, "checkDependencies": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "phase", "description": " the phase to check / initialize"}, {"type": "Function", "name": "callback", "description": " the callback to execute if all dependencies were loaded"}], "description": "Checks the dependency load state of the given phase.\nInitializes the appropriate phase if all dependencies are loaded.", "guessedname": "checkDependencies", "guessedtype": "function"}, "initBeforeBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the before binding phase.", "guessedname": "initBeforeBinding", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Module", "properties": {"connectors": {"type": "Array", "description": "Contains the attached connectors.", "guessedname": "connectors", "guessedtype": "property"}, "dependencyCounter": {"type": "Object", "description": "Contains the dependency counter for the different phases.", "guessedname": "dependencyCounter", "guessedtype": "property"}, "sandbox": {"type": "Sandbox", "description": "The sandbox to get the resources from.", "guessedname": "sandbox", "guessedtype": "property"}, "modId": {"type": "String", "description": "Contains the unique module id.", "guessedname": "modId", "guessedtype": "property"}, "$ctx": {"type": "jQuery", "description": "Contains the module context.", "guessedname": "ctx", "guessedtype": "property"}}, "description": "Base class for the different modules."}, "Tc.Application": {"name": "Tc.Application", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Application."}], "namespace": "Tc", "module": "Tc", "guessedname": "Application", "methods": {"registerModule": {"return": {"type": "Module", "description": "the reference to the registered module."}, "params": [{"type": "jQuery", "name": "$node", "description": " the module node."}, {"type": "String", "name": "modName", "description": " the module name. it must match the class name of the module (case sensitive)."}, {"type": "Array", "name": "skins", "description": " a list of skin names. each entry must match a class name of a skin (case sensitive))."}, {"type": "Array", "name": "connectors", "description": " a list of connectors identifiers. schema: <connectorName><connectorId><connectorRole> (ie. MasterSlave1Master)."}], "description": "Registers a module.", "guessedname": "registerModule", "guessedtype": "function"}, "unregisterModule": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " a list containting the module instances to unregister."}], "description": "Unregisters the modules by the given module instances.", "guessedname": "unregisterModules", "guessedtype": "function"}, "stop": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " a list containting the module instances to stop."}], "description": "Stops the registered modules.", "guessedname": "stop", "guessedtype": "function"}, "start": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " a list of the modules to start."}], "description": "Starts (intializes) the registered modules.", "guessedname": "start", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "jQuery", "name": "$ctx", "description": " the jquery context"}, {"type": "Object", "name": "config", "description": " the configuration"}], "description": "Initializes the Application.", "guessedname": "init", "guessedtype": "function"}, "registerConnection": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "connector", "description": " the full connector name (ie. MasterSlave1Slave)."}, {"type": "Module", "name": "component", "description": " the module instance."}], "description": "Registers a connection between a module and a connector.", "guessedname": "registerConnection", "guessedtype": "function"}, "registerModules": {"return": {"type": "Array", "description": "a list containing the references of the registered modules."}, "params": [{"type": "jQuery", "name": "$ctx", "description": " the jquery context."}], "description": "Registers all modules in the context scope automatically (as long as the modules uses the oocss naming conventions).", "guessedname": "registerModules", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Application", "properties": {"modules": {"type": "Array", "description": "Contains references to all modules on the page.\n-> could be useful ie. when there are interactions between flash <-> js.", "guessedname": "modules", "guessedtype": "property"}, "sandbox": {"type": "Sandbox", "description": "The sandbox to get the resources from (shared between all modules).", "guessedname": "sandbox", "guessedtype": "property"}, "connectors": {"type": "Object", "description": "Contains references to all connectors on the page.", "guessedname": "connectors", "guessedtype": "property"}, "$ctx": {"type": "jQuery", "description": "The jquery context.", "guessedname": "ctx", "guessedtype": "property"}, "wildcardComponents": {"type": "Array", "description": "Contains references to all wilcard components on the page.", "guessedname": "wildcardComponents", "guessedtype": "property"}, "config": {"type": "Object", "description": "The configuration.", "guessedname": "config", "guessedtype": "property"}}, "description": "Responsible for application wide issues (ie. the creation of modules)."}}, "version": "1.0.0", "namespaces": ["Tc", "Tc.Utils"]}